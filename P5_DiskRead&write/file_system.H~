
#ifndef _FILE_SYSTEM_H_                
#define _FILE_SYSTEM_H_

/*--------------------------------------------------------------------------*/
/* DEFINES */
/*--------------------------------------------------------------------------*/

/* -- (none) -- */

/*--------------------------------------------------------------------------*/
/* INCLUDES */
/*--------------------------------------------------------------------------*/

#include "utils.H"
#include "simple_disk.H"
#include "blocking_disk.H"
#define MAX_FILES 256
/*--------------------------------------------------------------------------*/
/* DATA STRUCTURES */ 
/*--------------------------------------------------------------------------*/

/* -- (none) -- */
typedef struct superblock{
	char type[20];//
	unsigned int bloc;
}superblock;


typedef struct Block{
	unsigned int block_id; // responding to the file id 
	unsigned int free;
	unsigned int block_size;
}Block;

/*--------------------------------------------------------------------------*/
/* FORWARD DECLARATIONS */ 
/*--------------------------------------------------------------------------*/

static unsigned char disk_buf[512];


class FileSystem;

/*--------------------------------------------------------------------------*/
/* F i l e */
/*--------------------------------------------------------------------------*/

class File {
private: 
     /* -- DEFINE YOUR FILE DATA STRUCTURES HERE. */
     
     FileSystem   * file_system;

     unsigned int   file_id;

     unsigned int   location;
     unsigned int   block_size;
     unsigned int   inode_block_num;
     unsigned int   start_block;
     unsigned int   file_size;
     unsigned int * block_nums; // pointer of array block number 
     unsigned int   cur_block;
     unsigned int   cur_pos;
     
public:
    File();
    File(unsigned int,FileSystem *FILE_SYSTEM);
    /* Constructor for the file handle. Set the 'current
       position' to be at the beginning of the file. */

    unsigned int Read(unsigned int _n, unsigned char * _buf);
    /* Read _n characters from the file starting at the 
       current location and copy them in _buf.
       Return the number of characters read. */

    unsigned int Write(unsigned int _n, unsigned char * _buf);
    /* Write _n characters to the file starting at the current 
       location, if we run past the end of file, we increase 
       the size of the file as needed. 
     */
   unsigned int get_inode();
   unsigned int get_file_id();
   unsigned int get_position();
   unsigned int get_size();
   unsigned int get_block();
   void  assign_inode_num(unsigned int inode);
   void  assign_file_id(unsigned int id);
   void  assign_position(unsigned int pos);
   void  assign_size(unsigned int size);
   void  assign_block_nums(unsigned int *file);

    void Reset();
    /* Set the 'current position' at the beginning of the file. */
    //void Rewrite();
    
    /* Erase the content of the file. Return any freed blocks. 
       Note: This function does not delete the file! It just erases its
       content. */

    BOOLEAN EoF();
    /* Is the current location for the file at the end of the file? */


};

/*--------------------------------------------------------------------------*/
/* F i l e S y s t e m  */
/*--------------------------------------------------------------------------*/

class FileSystem {

friend class File;

private:
     /* -- DEFINE YOUR FILE SYSTEM DATA STRUCTURES HERE. */
     
     SimpleDisk * disk;
     unsigned int size; 
     File files[MAX_FILES]; // pointer of array
     unsigned int num_files; // number of files
     unsigned int current_block; // current block

     
public:

   FileSystem();   
   /* Just initializes local data structures. Does not connect to disk yet. */

   BOOLEAN Mount(SimpleDisk * _disk);
   /* Associates the file system with a disk. We limit ourselves to at most one
      file system per disk. Returns TRUE if 'Mount' operation successful (i.e. there
      is indeed a file system on the disk. */

   static BOOLEAN Format(SimpleDisk * _disk, unsigned int _size);
   /* Wipes any file system from the given disk and installs a new, empty, file
      system that supports up to _size Byte. */
   
   BOOLEAN LookupFile(int _file_id, File * _file);
   /* Find file with given id in file system. If found, initialize the file 
      object and return TRUE. Otherwise, return FALSE. */

   BOOLEAN CreateFile(int _file_id);
   /* Create file with given id in the file system. If file exists already,
      abort and return FALSE. Otherwise, return TRUE. */

   BOOLEAN DeleteFile(int _file_id);
   /* Delete file with given id in the file system and free any disk block
      occupied by the file. */

   unsigned int get_size();
   unsigned int get_block();
   void removeBlock(unsigned int block_num);
};
#endif
